# Clineの遵守事項

このドキュメントは、ユーザーからの指示に基づき、Clineが今後の作業で遵守すべき事項をまとめたものです。

## 1. コマンド実行結果の確認と対応

*   **ルール**: コマンドの実行結果を必ず確認し、出力が確認できない場合はユーザーに問い合わせる。
*   **背景**: コマンドの完了を待たずに次のコマンドを実行すると、エラーが発生したり、作業履歴の追跡が困難になるため。

## 2. Docker Composeの実行

*   **ルール**: `docker compose up`は必ず`-d`オプションを付与する（`docker compose up -d`）。
*   **背景**: Docker Composeがバックグラウンドで実行され、Clineが新しいコマンドを実行する際にプロセスがkillされる可能性を懸念するため。また、ユーザー自身がコンソールを利用するためには、バックグラウンドに処理を移す方がシステム効率が良い。

## 3. フォアグラウンド処理の継続

*   **ルール**: フォアグラウンドで処理を継続するコマンドを実行する際には、デタッチオプションを付ける（あれば）。ない場合は、私に手動でコマンドを実行する依頼を行う。
*   **背景**: 上記2.と同様の理由。

## 4. Next.js開発モードの初期化時間

*   **ルール**: Next.jsをdevモードで実行する際は、ビルドなど初期化処理があるために、ユーザーからのスループットに6000ミリ秒程時間を要することがある。ブラウザを開いてすぐは、画面がホワイトアウトし何も表示されないが、次のコマンドを実行したりしないこと（もしくはスループットを考慮し、次のタスクの内容を決定・実行すること）。
*   **背景**: Next.js開発サーバーの起動には時間がかかるため、性急な操作を避けるため。

## 5. プロジェクト固有の考慮事項: WSL上のホストからのアクセス

*   **ルール**: このプロジェクトでは、「WSL上のホストからアクセスする (frontendもbackendも)」という視点を常に最優先で考慮する。
*   **背景**: WSL2環境におけるネットワークアクセス（特にホストマシンからのアクセス）の複雑さを踏まえ、すべての設定やデプロイ戦略にこの点を反映させる必要があるため。ブラウザからアクセスするURLと、Kubernetesクラスタ内部でのサービス間通信のURLを明確に区別し、それぞれに適切な設定を行うことが肝要である。

## 6. Dockerイメージビルド時のユーザー確認

*   **ルール**: Dockerイメージのビルドコマンドが実行された後、ユーザーが目視でビルド完了を確認し、合図があるまで次のコマンドを実行しない。
*   **背景**: ビルドに時間がかかるため、完了を待たずに次のコマンドを実行するとエラーが発生する可能性があるため。

## 7. コマンド実行結果の正確な把握

*   **ルール**: コマンドの実行結果をより注意深く確認し、出力が確認できた場合はそれを正確に把握する。
*   **背景**: コマンドの出力が正しく表示されていたにもかかわらず、それを認識できなかった過去の失敗を踏まえ、正確な情報把握に努めるため。

## 8. 過去の失敗の繰り返し回避

*   **ルール**: 過去の試行錯誤とログを徹底的に確認し、同じ失敗を繰り返さない。
*   **背景**: 問題解決アプローチの非効率性を改善し、ユーザーの貴重な時間とリソースを無駄にしないため。

## 9. ドキュメント作成のルール

*   **ルール**: `README.md`や`docs`ディレクトリのドキュメントを、機能修正時には必ず更新すること。

## 10. コメントについて

*   **ルール**: 新しい機能やコンポーネントを実装する際は、自動的にJSDoc形式のコメントを追加すること。

## 11. 個人情報保護とセキュリティのルール

*   **ルール**: `env`ファイルなどの環境変数（minikubeであれば`credential`）にAPIキーや機密情報を格納すること。
*   **ルール**: APIキーや機密情報は、クライアントサイドのコンポーネントに絶対に含めないこと。

## 12. UIの実装について

*   **ルール**: ユーザー入力値は常にバリデーションとサニタイズを行うこと。
*   **ルール**: `atom`を意識したコンポーネント化を出来るだけ行う事。

## 13. 開発のワークフロー

*   **ルール**: Plan & Actモードを利用し、実装の前に必ず詳細な計画を提示すること。
*   **ルール**: 複雑なタスクはChain-of-Thought（思考の連鎖）プロンプト戦略に従って、ステップごとに分解して進めること。

## 14. 機密情報の取り扱い

*   **ルール**: 機密情報（ユーザー名、パスワード、APIキーなど）は、コードに直接記載しないこと。`env`ファイルなどの環境変数に格納し、適切に管理すること。
*   **ルール**: このリポジトリをクローンして利用する際は、機密情報部分を適宜書き換える旨を記載すること。あくまで技術探求のためのソースであり、本番での利用は推奨しない上に責任は負えない旨を追記すること。
