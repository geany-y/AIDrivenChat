# Clineの遵守事項

このドキュメントは、ユーザーからの指示に基づき、Clineが今後の作業で遵守すべき事項をまとめたものです。

## 1. 作業計画や修正方針の確認

*   **ルール**: 作業計画や修正方針を、ユーザに確認してからコマンド実行やファイル修正を行う。ユーザーの承認なしに、ファイル修正やコマンド実行（特にブランチ作成などの環境変更を伴うもの）は絶対に行わない。
*   **背景**: ユーザーの意図と異なる作業を避け、重要な変更前に合意形成を図るため。

## 1.1. 作業計画のディスカッションと合意形成

*   **ルール**: 作業計画や修正方針を提示した後、ユーザーとディスカッションを行い、内容について合意がとれた時点で次の作業を開始する。
*   **背景**: ユーザーの意図と異なる作業を避け、効率的かつ効果的な開発を進めるため。

## 1.2. コミット作業の実施

*   **ルール**: ファイル修正が完了し、ユーザーの承認が得られた後、コミット作業はユーザーが行う。Clineはコミットを提案するが、実行はしない。
*   **背景**: ユーザーが変更履歴を完全に管理し、最終的な承認を行うため。

## 1.3. 作業計画のディスカッション方針

*   **ルール**: ユーザーは、提示された作業計画や修正方針に対して、具体的な文章でレビューや意見を返す。Clineは、その内容を受け取り、提案や意見を返すことでディスカッションを進める。最終的な方針が確定した時点で、ユーザーがその旨をClineに伝える。
*   **背景**: ユーザーの意図をより深く理解し、効率的かつ効果的な開発を進めるため。

## 1.4. 条件分岐の原則

*   **ルール**: コードの可読性とメンテナンス性を最優先とし、以下の優先順位で条件分岐を適用する。
    1.  **早期リターン (Early Return)**: 関数の冒頭で無効な状態や前提条件をチェックし、条件が満たされない場合はすぐに `return` または `continue` することで処理を終了させる。これにより、メインロジックのネストを減らし、コードのフローを直線的に保つ。
    2.  **ガード句 (Guard Clause)**: 早期リターンと同様に、特定の条件が満たされた場合に処理を終了させるが、より局所的なスコープで適用される。
    3.  **フラットな条件分岐**: `else` や `else if` の使用は極力避け、条件分岐を独立した `if` 文の連続で表現する。条件が満たされた場合に値を上書きする、またはデフォルト値を設定し、条件が満たされた場合にのみ上書きするアプローチを推奨する。
*   **背景**: ネストの深い複雑な条件分岐を避け、各条件が独立して扱われることで、可読性とメンテナンス性を高め、条件の追加や削除が容易になるようにするため。

## 1.5. ディスカッション要約のドキュメント作成

*   **ルール**: 各Task完了後、決定した最終方針とタスク完了後のレポートにあわせて、ディスカッション内で特筆すべき内容（技術的な補足を含む）を`documents/discuss_summary`フォルダにTaskの要望を要約したファイル名で保存する。
*   **背景**: 重要な決定事項や技術的な経緯を記録し、将来の参照やプロジェクトの理解を深めるため。

## 1.6. 承認時の選択肢提示の禁止
*   **ルール**: 作業計画や修正方針の承認を求める際、選択肢（例: 「はい、この計画で進めてください。」「計画を修正してください。」）を提示しない。ユーザーは具体的な文章で承認または修正指示を行う。
*   **背景**: ユーザーが自由に意見を述べられるようにするため。

## 2. コマンド実行結果の確認と対応

*   **ルール**: コマンドの実行結果を必ず確認し、出力が確認できない場合はユーザーに問い合わせる。**特に、コマンドの出力がキャプチャに失敗した場合は、ユーザーにそのコマンドの出力を手動で確認し、提供するよう依頼する。**
*   **背景**: コマンドの完了を待たずに次のコマンドを実行すると、エラーが発生したり、作業履歴の追跡が困難になるため。

## 3. Docker Composeの実行

*   **ルール**: `docker compose up`は必ず`-d`オプションを付与する（`docker compose up -d`）。
*   **背景**: Docker Composeがバックグラウンドで実行され、Clineが新しいコマンドを実行する際にプロセスがkillされる可能性を懸念するため。また、ユーザー自身がコンソールを利用するためには、バックグラウンドに処理を移す方がシステム効率が良い。

## 4. フォアグラウンド処理の継続

*   **ルール**: フォアグラウンドで処理を継続するコマンドを実行する際には、デタッチオプションを付ける（あれば）。ない場合は、私に手動でコマンドを実行する依頼を行う。
*   **背景**: 上記2.と同様の理由。

## 5. Next.js開発モードの初期化時間

*   **ルール**: Next.jsをdevモードで実行する際は、ビルドなど初期化処理があるために、ユーザーからのスループットに6000ミリ秒程時間を要することがある。ブラウザを開いてすぐは、画面がホワイトアウトし何も表示されないが、次のコマンドを実行したりしないこと（もしくはスループットを考慮し、次のタスクの内容を決定・実行すること）。
*   **背景**: Next.js開発サーバーの起動には時間がかかるため、性急な操作を避けるため。

## 6. プロジェクト固有の考慮事項: WSL上のホストからのアクセス

*   **ルール**: このプロジェクトでは、「WSL上のホストからアクセスする (frontendもbackendも)」という視点を常に最優先で考慮する。
*   **背景**: WSL2環境におけるネットワークアクセス（特にホストマシンからのアクセス）の複雑さを踏まえ、すべての設定やデプロイ戦略にこの点を反映させる必要があるため。ブラウザからアクセスするURLと、Kubernetesクラスタ内部でのサービス間通信のURLを明確に区別し、それぞれに適切な設定を行うことが肝要である。

## 7. Dockerイメージビルド時のユーザー確認

*   **ルール**: Dockerイメージのビルドコマンドが実行された後、ユーザーが目視でビルド完了を確認し、合図があるまで次のコマンドを実行しない。
*   **背景**: ビルドに時間がかかるため、完了を待たずに次のコマンドを実行するとエラーが発生する可能性があるため。

## 8. コマンド実行結果の正確な把握

*   **ルール**: コマンドの実行結果をより注意深く確認し、出力が確認できた場合はそれを正確に把握する。
*   **背景**: コマンドの出力が正しく表示されていたにもかかわらず、それを認識できなかった過去の失敗を踏まえ、正確な情報把握に努めるため。

## 9. 過去の失敗の繰り返し回避

*   **ルール**: 過去の試行錯誤とログを徹底的に確認し、同じ失敗を繰り返さない。
*   **背景**: 問題解決アプローチの非効率性を改善し、ユーザーの貴重な時間とリソースを無駄にしないため。

## 10. ドキュメント作成のルール

*   **ルール**: `README.md`や`docs`ディレクトリのドキュメントを、機能修正時には必ず更新すること。

## 11. コメントについて

*   **ルール**: 新しい機能やコンポーネントを実装する際は、自動的にJSDoc形式のコメントを追加すること。

## 12. 個人情報保護とセキュリティのルール

*   **ルール**: `env`ファイルなどの環境変数（minikubeであれば`credential`）にAPIキーや機密情報を格納すること。
*   **ルール**: APIキーや機密情報は、クライアントサイドのコンポーネントに絶対に含めないこと。

## 13. UIの実装について

*   **ルール**: ユーザー入力値は常にバリデーションとサニタイズを行うこと。
*   **ルール**: `atom`を意識したコンポーネント化を出来るだけ行う事。

## 14. 開発のワークフロー

*   **ルール**: Plan & Actモードを利用し、実装の前に必ず詳細な計画を提示すること。
*   **ルール**: 複雑なタスクはChain-of-Thought（思考の連鎖）プロンプト戦略に従って、ステップごとに分解して進めること。

## 15. 機密情報の取り扱い

*   **ルール**: 機密情報（ユーザー名、パスワード、APIキーなど）は、コードに直接記載しないこと。`env`ファイルなどの環境変数に格納し、適切に管理すること。
*   **ルール**: このリポジトリをクローンして利用する際は、機密情報部分を適宜書き換える旨を記載すること。あくまで技術探求のためのソースであり、本番での利用は推奨しない上に責任は負えない旨を追記すること。

## 16. ブランチ命名規則

*   **ルール**: 今後一つのTask内で、初めて新しいファイルを作成する場合は以下の命名規則にしたがったブランチを作成し、そのブランチにチェックアウトを行ってからファイルの修正を始めること。
    *   **命名規則**: `ai/feature/[タスクの内容を簡潔にまとめた英文]`

## 17. タスク開始時のルール確認

*   **ルール**: 各Taskの開始時は、必ず`.clinerules`の内容を徹底的に確認し、その内容を厳守して作業を進めること。
*   **背景**: ユーザーの意図と異なる作業や、過去の失敗の繰り返しを避け、効率的かつ効果的な開発を確実に行うため。
